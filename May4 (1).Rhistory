# ANALYSIS N PRESACRAL VERTEBRAE

library(lattice)

# read in data

data<-read.csv("fastslowmammals.csv")

head(data)

densityplot(~(data$Presacral.No)|factor(data$Running_Speed)) 
# This suggest bimodal distributions in some of the groups, however, these may be due to species differences

##

# helper variables: selectors for sets of species with nobs above given values

varselect1<-names(table(data$Species_name))[table(data$Species_name)>1]
length(varselect1)

varselect5<-names(table(data$Species_name))[table(data$Species_name)>5]
length(varselect5)

varselect10<-names(table(data$Species_name))[table(data$Species_name)>10]
length(varselect10)

varselect20<-names(table(data$Species_name))[table(data$Species_name)>20]
length(varselect20)

##

densityplot(~round(data$Presacral.No)|factor(data$Species_name),subset=data$Species_name%in%varselect20)

densityplot(~(data$Presacral.No)|factor(data$Species_name),subset=data$Species_name%in%varselect20)
densityplot(~(data$Presacral.No)|factor(data$Species_name),subset=data$Species_name%in%varselect10)
# plot density approximations per species, for species with > 20 observations
# no indication of bimodality within species

# plots of bootstrap confidence intervals, simple percentile confidence intervals
#################################################################################

# calculation of statistics

meaner<-function(x)mean(x,na.rm=T)
varmans<-function(x)var(x,na.rm=T)
nobser<-function(x)length(x)
first<-function(x)x[1]

specmeans<-tapply(data$Presacral.No.,data$Species_name,meaner)
specvars<-tapply(data$Presacral.No.,data$Species_name,varmans)
specobs<-tapply(data$Presacral.No.,data$Species_name,nobser)
specrun<-tapply(as.character(data$Running_Speed),data$Species_name,first)

# bootstrap mean
meanbootse<-function(x){stats<-apply(matrix(sample(x,1000*length(x),replace=T),nrow=1000),1,meaner);stats<-sort(stats);return(c(sd(stats,na.rm=T),stats[26],stats[975]))}

# following only for species with more than one obs, such that a variance can be calculated
specmeantab<-tapply(data$Presacral.No.[data$Species_name%in%varselect1],data$Species_name[data$Species_name%in%varselect1],meanbootse)
specmeanses<-data.frame(matrix(unlist(specmeantab),nrow=70,byrow=T))
specobsv<-tapply(data$Presacral.No.[data$Species_name%in%varselect1],data$Species_name[data$Species_name%in%varselect1],nobser)
specobsv<-specobsv[rownames(specobsv)%in%varselect1]
specrunv<-tapply(as.character(data$Running_Speed)[data$Species_name%in%varselect1],data$Species_name[data$Species_name%in%varselect1],first)
specrunv<-specrunv[rownames(specrunv)%in%varselect1]
specmeansv<-tapply(data$Presacral.No.[data$Species_name%in%varselect1],data$Species_name[data$Species_name%in%varselect1],meaner)
specmeansv<-specmeansv[rownames(specmeansv)%in%varselect1]


combine the two in a graph with mean and se

plot(specmeansv~specobsv,type="n",main="Fast, Fast/Halfbound and Slow",xlab="Number of observations",ylab="N Presacral")
specobsj<-jitter(specobsv,2)
for(i in 1:length(specmeansv)){lines(rep((specobsj[i]),2),c(specmeanses[i,2],specmeanses[i,3]),col=ifelse(specrunv[i]=="fast","blue",ifelse(specrunv[i]=="slow","red","black")),lwd=2)}

for(i in 1:length(specmeansv)){lines(rep((specobsj[i]),2),c(specmeanses[i,2],specmeanses[i,3]),col=ifelse(specrunv[i]=="fast","blue",ifelse(specrunv[i]=="slow","red","black")),lwd=2)}
plot(specmeansv~specobsv,type="n",main="Fast, Fast/Halfbound and Slow",xlab="Number of observations",ylab="N Presacral",ylim=c(24,30),xlim=c(0,45))


xyplot(specvars~specobs|specrun)

# get bootstrap standard errors on variance estimates
# will become increasingly relevant with increasing sample size
# 1000 bootstrap replicates

varbootse<-function(x){stats<-apply(matrix(sample(x,1000*length(x),replace=T),nrow=1000),1,varmans);stats<-sort(stats);return(c(sd(stats,na.rm=T),stats[26],stats[975]))}

# following only for species with more than one obs, such that a variance can be calculated
specvartab<-tapply(data$Presacral.No.[data$Species_name%in%varselect1],data$Species_name[data$Species_name%in%varselect1],varbootse)
specvarses<-data.frame(matrix(unlist(specvartab),nrow=70,byrow=T))
specobsv<-tapply(data$Presacral.No.[data$Species_name%in%varselect1],data$Species_name[data$Species_name%in%varselect1],nobser)
specobsv<-specobsv[rownames(specobsv)%in%varselect1]
specrunv<-tapply(as.character(data$Running_Speed)[data$Species_name%in%varselect1],data$Species_name[data$Species_name%in%varselect1],first)
specrunv<-specrunv[rownames(specrunv)%in%varselect1]
specmeansv<-tapply(data$Presacral.No.[data$Species_name%in%varselect1],data$Species_name[data$Species_name%in%varselect1],meaner)
specmeansv<-specmeansv[rownames(specmeansv)%in%varselect1]
specvarsv<-tapply(data$Presacral.No.[data$Species_name%in%varselect1],data$Species_name[data$Species_name%in%varselect1],varmans)
specvarsv<-specvarsv[rownames(specvarsv)%in%varselect1]

xyplot(specvarsv~specobsv|specrunv,xlab="Nobs",ylab="variance estimate")

combine the two in a graph with mean and se

plot(specvarsv~specobsv,type="n",main="Fast, Fast/Halfbound and Slow",ylim=c(-0.1,1),xlab="Number of observations",ylab="Variance of N Presacral")
for(i in 1:length(specmeansv)){lines(rep((specobsj[i]),2),c(specvarses[i,2],specvarses[i,3]),col=ifelse(specrunv[i]=="fast","blue",ifelse(specrunv[i]=="slow","red","black")),lwd=2)}

# tables with numbers of species with >1 observation and without variation:
table(specvarsv>0,specrunv)
table(specvarsv>0,specobsv,specrunv)
table(specvarsv>0,specrunv)

# analysis with normal approximation
####################################

# model with different mean per species, different variance estimates per running category
# inspect confidence intervals ratio of variances
# fitting a model with a separate variance per species doesn't work

gls2<-gls(Presacral.No.~Species_name,weights=varIdent(form=~1|Running_Speed),data=data,na.action=na.omit)
intervals(gls2) # confidence intervals of all parameters, main interest in scale parameters of variance function

# analysis with conway-maxwell-poisson distributions
# library(compoisson)
# OMITTED no use when variances are often zero in one group


# comparative analysis
#######################
analysis with OU model


library(ape)
library(phytools)
library(picante)
library(OUwie)

# read in tree mammals bininda edmonds

treem<-read.nexus("mammals.nex")
treem2<-as.phylo(treem[[1]])

# tips to be dropped 
droppers<-!(treem2$tip.label%in%unique(data$Species_name))
droptips<-treem2$tip.label[droppers]
subtreem<-drop.tip(treem2,droptips)
plot(subtreem)
subtreem2<-multi2di(subtreem) # resolve 

# put fast and slow regimes on this
# using ace for ancestral state reconstruction

traitsr<-character(length(subtreem2$tip.label))
for(i in 1:length(traitsr))traitsr[i]<-specrun[rownames(specrun)==subtreem2$tip.label[i]]
acer<-ace(traitsr,subtreem2,"discrete",model="ARD")
plot(subtreem2,show.tip.label=FALSE)
tiplabels(pch = 22, bg = co[as.numeric(factor(traitsr))], cex = 2, adj = 1)
nodelabels(pie=acer$lik.anc, piecol = co, cex = 0.5)

# selection of data: only species with >5 obs


# tips to be dropped 
droppers2<-!(treem2$tip.label%in%unique(data$Species_name[data$Species_name%in%varselect5]))
droptips2<-treem2$tip.label[droppers2]
subtreem3<-drop.tip(treem2,droptips2)
plot(subtreem3)
subtreem4<-multi2di(subtreem3)

traitsr2<-character(length(subtreem4$tip.label))
for(i in 1:length(traitsr2))traitsr2[i]<-specrun[rownames(specrun)==subtreem4$tip.label[i]]
subtreem4$edge.length<-subtreem4$edge.length+0.000001 # not always necessary
acer<-ace(traitsr2,subtreem4,"discrete",model="ARD")

plot(subtreem4,show.tip.label=FALSE)
co<-c("blue","red","black")
tiplabels(pch = 22, bg = co[as.numeric(factor(traitsr2))], cex = 2, adj = 1)
nodelabels(pie=acer$lik.anc, piecol = co, cex = 0.5)


# regime with largest probability at each node

recrun<-ifelse(acer$lik.anc[,1]-acer$lik.anc[,3]>0,"fast","slow")
recrun<-ifelse((acer$lik.anc[,2]-acer$lik.anc[,3]>0)&(acer$lik.anc[,2]-acer$lik.anc[,1]>0),"fast_halfbound",recrun)


# plot these
plot(subtreem4,show.tip.label=FALSE)
tiplabels(pch = 22, bg = co[as.numeric(factor(traitsr2))], cex = 2, adj = 1)
nodelabels(bg=co[as.numeric(factor(recrun))], cex = 1.5,pch=22)


# put presacral number on the tree

nsac<-numeric(length(subtreem4$tip.label))
for(i in 1:length(nsac))nsac[i]<-specmeans[rownames(specrun)==subtreem4$tip.label[i]]

# error per species: standard error of bootstrap 
nserr<-numeric(length(subtreem4$tip.label))
for(i in 1:length(nserr))nserr[i]<-specvarses[,1][rownames(specrunv)==subtreem4$tip.label[i]]

# prepare for OU fitting 
subtreem4$node.label<-recrun
treedat<-data.frame(subtreem4$tip.label,traitsr2,nsac,nserr) # phenotypic data

plot(subtreem4,show.tip.label=FALSE)
tiplabels(round(nsac*100)/100)
nodelabels(bg=co[as.numeric(factor(recrun))], cex = 1.5,pch=22)


# with boostrapped measurement error
OUmvae<-OUwie(subtreem4,treedat,model="OUMVA",mserr="known",diagn=T) # different alpha, sigma
OUmae<-OUwie(subtreem4,treedat,model="OUMA",mserr="known",diagn=T) # different alpha
OUmve<-OUwie(subtreem4,treedat,model="OUMV",mserr="known",diagn=T) # different sigma
OUme<-OUwie(subtreem4,treedat,model="OUM",mserr="known",diagn=T) # different optima
OU1e<-OUwie(subtreem4,treedat,model="OU1",mserr="known",diagn=T) # one optimum

OUmvae$AICc
OUmve$AICc
OUmae$AICc
OUme$AICc
OU1e$AICc

OUmvae
OUMve
OUmae

# without bootstrapped error
OUmva<-OUwie(subtreem4,treedat,model="OUMVA",mserr="none",diagn=T)
OUma<-OUwie(subtreem4,treedat,model="OUMA",mserr="none",diagn=T)
OUmv<-OUwie(subtreem4,treedat,model="OUMV",mserr="none",diagn=T)
OUm<-OUwie(subtreem4,treedat,model="OUM",mserr="none",diagn=T)
OU1<-OUwie(subtreem4,treedat,model="OU1",mserr="none",diagn=T)

OUmva$AICc
OUmv$AICc
OUma$AICc
OUm$AICc
OU1$AICc


OUmva
OUMv
OUma

# with four selection regimes
# might lead to better estimate of optima

traitsr2<-character(length(subtreem4$tip.label))
for(i in 1:length(traitsr2))traitsr2[i]<-specrun[rownames(specrun)==subtreem4$tip.label[i]]
traitsr3<-traitsr2
traitsr3[24:35]<-"fast1"

# reconstruction of regimes 
acer<-ace(traitsr3,subtreem4,"discrete",model="ARD")
plot(subtreem4,show.tip.label=FALSE)
co<-c("blue","red","black","yellow","purple")
tiplabels(pch = 22, bg = co[as.numeric(factor(traitsr3))], cex = 2, adj = 1)
nodelabels(pie=acer$lik.anc, piecol = co, cex = 0.5)
acer$lik.anc[1:5,] 

recrun<-ifelse(acer$lik.anc[,1]-acer$lik.anc[,4]>0,"fast","slow")
recrun<-ifelse((acer$lik.anc[,2]-acer$lik.anc[,1]>0)&(acer$lik.anc[,2]-acer$lik.anc[,3]>0)&(acer$lik.anc[,2]-acer$lik.anc[,4]>0),"fast_halfbound",recrun)
recrun<-ifelse((acer$lik.anc[,3]-acer$lik.anc[,1]>0)&(acer$lik.anc[,3]-acer$lik.anc[,2]>0)&(acer$lik.anc[,3]-acer$lik.anc[,4]>0),"fast1",recrun)

plot(subtreem4,show.tip.label=FALSE)
tiplabels(pch = 22, bg = co[as.numeric(factor(traitsr2))], cex = 2, adj = 1)
nodelabels(bg=co[as.numeric(factor(recrun))], cex = 1.5,pch=22)

# put trait on tree

nsac<-numeric(length(subtreem4$tip.label))
for(i in 1:length(nsac))nsac[i]<-specmeans[rownames(specrun)==subtreem4$tip.label[i]]

nserr<-numeric(length(subtreem4$tip.label))
for(i in 1:length(nserr))nserr[i]<-specvarses[,1][rownames(specrunv)==subtreem4$tip.label[i]]

subtreem4$node.label<-recrun
treedat<-data.frame(subtreem4$tip.label,traitsr3,nsac,nserr)

plot(subtreem4,show.tip.label=FALSE)
tiplabels(round(nsac*100)/100)
nodelabels(bg=co[as.numeric(factor(recrun))], cex = 1.5,pch=22)

# with bootstrap error
OU2mvae<-OUwie(subtreem4,treedat,model="OUMVA",mserr="known",diagn=T)
OU2mae<-OUwie(subtreem4,treedat,model="OUMA",mserr="known",diagn=T)
OU2mve<-OUwie(subtreem4,treedat,model="OUMV",mserr="known",diagn=T)
OU2me<-OUwie(subtreem4,treedat,model="OUM",mserr="known",diagn=T)
OU21e<-OUwie(subtreem4,treedat,model="OU1",mserr="known",diagn=T)

OU2mvae$AICc
OU2mve$AICc
OU2mae$AICc
OU2me$AICc
OU21e$AICc


OU2mvae
OU2Mve
OU2mae

# without bootstrap error
OU2mva<-OUwie(subtreem4,treedat,model="OUMVA",mserr="none",diagn=T)
OU2ma<-OUwie(subtreem4,treedat,model="OUMA",mserr="none",diagn=T)
OU2mv<-OUwie(subtreem4,treedat,model="OUMV",mserr="none",diagn=T)
OU2m<-OUwie(subtreem4,treedat,model="OUM",mserr="none",diagn=T)
OU21<-OUwie(subtreem4,treedat,model="OU1",mserr="none",diagn=T)

OU2mva$AICc
OU2mv$AICc
OU2ma$AICc
OU2m$AICc
OU21$AICc


OU2mva
OU2Mv
OU2ma

################


